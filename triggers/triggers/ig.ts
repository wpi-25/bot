import { MessageEmbed } from 'discord.js';
import fetch from 'node-fetch';
import { TriggeredCommand } from '../../Types';

module.exports = <TriggeredCommand>{
    trigger: /^ig@(.+)$/,
    async execute(message, args: RegExpMatchArray) {
        if (!args || args.length != 2) {
            return;
        }
        const username = args[1];
        message.channel.sendTyping();

        try {
            const serverResponse = await fetch(
                `https://www.instagram.com/${username}/?__a=1`
            );
            if (!serverResponse.ok) {
                console.warn(
                    `=== INSTAGRAM ERROR, RESPONSE ${serverResponse.status} ${serverResponse.statusText} ===`,
                    await serverResponse.text()
                );
                throw `The Instagram API rejected the request with an error code of \`${serverResponse.status} ${serverResponse.statusText}\``;
            }
            const response: InstagramAPIProfile = await serverResponse.json();
            const user = response?.graphql.user;
            console.log(user);
            const profileURL = `https://instagram.com/${user.username}`;
            const embed = new MessageEmbed()
                .setAuthor(
                    `${user.full_name}${user.is_private ? ' üîí' : ''}${
                        user.is_verified ? ' ‚òëÔ∏è' : ''
                    }`,
                    user.profile_pic_url,
                    profileURL
                )
                .setDescription(user.biography)
                .addField(
                    'Posts',
                    user.edge_owner_to_timeline_media.count.toString(),
                    true
                )
                .addField(
                    'Followers',
                    user.edge_followed_by.count.toString(),
                    true
                )
                .addField('Following', user.edge_follow.count.toString(), true)
                .setURL(profileURL);
            message.channel.send({ embeds: [embed] });
        } catch (e) {
            if (e.toString().includes('Cannot read property')) {
                throw (
                    `The Instagram API rejected the request and didn't return a valid user.\n` +
                    `Check that you typed your username correctly.\`\`\`${e}\`\`\``
                );
            } else if (e.toString().includes('invalid json response')) {
                throw (
                    `The Instagram API rejected the request and didn't return valid data.` +
                    `Please try again in a few hours.\`\`\`${e}\`\`\``
                );
            } else {
                throw e;
            }
        }
    },
};

// Generated by https://quicktype.io

export interface InstagramAPIProfile {
    seo_category_infos: Array<string[]>;
    logging_page_id: string;
    show_suggested_profiles: boolean;
    show_follow_dialog: boolean;
    graphql: Graphql;
    toast_content_on_load: null;
    show_view_shop: boolean;
    profile_pic_edit_sync_props: null;
    always_show_message_button_to_pro_account: boolean;
}

export interface Graphql {
    user: User;
}

export interface User {
    biography: string;
    blocked_by_viewer: boolean;
    restricted_by_viewer: null;
    country_block: boolean;
    external_url: string;
    external_url_linkshimmed: string;
    edge_followed_by: EdgeFollow;
    fbid: string;
    followed_by_viewer: boolean;
    edge_follow: EdgeFollow;
    follows_viewer: boolean;
    full_name: string;
    has_ar_effects: boolean;
    has_clips: boolean;
    has_guides: boolean;
    has_channel: boolean;
    has_blocked_viewer: boolean;
    highlight_reel_count: number;
    has_requested_viewer: boolean;
    hide_like_and_view_counts: boolean;
    id: string;
    is_business_account: boolean;
    is_professional_account: boolean;
    is_joined_recently: boolean;
    business_address_json: null;
    business_contact_method: null;
    business_email: null;
    business_phone_number: null;
    business_category_name: null;
    overall_category_name: null;
    category_enum: null;
    category_name: null;
    is_private: boolean;
    is_verified: boolean;
    edge_mutual_followed_by: EdgeMutualFollowedBy;
    profile_pic_url: string;
    profile_pic_url_hd: string;
    requested_by_viewer: boolean;
    should_show_category: boolean;
    should_show_public_contacts: boolean;
    username: string;
    connected_fb_page: null;
    edge_felix_video_timeline: Edge;
    edge_owner_to_timeline_media: Edge;
    edge_saved_media: Edge;
    edge_media_collections: Edge;
    edge_related_profiles: EdgeRelatedProfiles;
}

export interface Edge {
    count: number;
    page_info: PageInfo;
    edges: unknown[];
}

export interface PageInfo {
    has_next_page: boolean;
    end_cursor: null | string;
}

export interface EdgeFollow {
    count: number;
}

export interface EdgeMutualFollowedBy {
    count: number;
    edges: unknown[];
}

export interface EdgeRelatedProfiles {
    edges: unknown[];
}
